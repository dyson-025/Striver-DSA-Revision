🃏 Revision Card: Max Consecutive Ones III
📌 Problem link: https://leetcode.com/problems/max-consecutive-ones-iii/

Given a binary array nums and an integer k, return the length of the longest subarray containing only 1s after flipping at most k zeros.

Example:

Input: nums = [1,1,0,0,1,1,1,0,1], k = 2  
Output: 7  
Explanation: We can flip the two zeros at indices 2 and 3 → longest subarray of 1s = [1,1,1,1,1,1,1]

🔹 Approach 1: Brute Force (O(n²))

Try all subarrays.

Count zeros → if ≤ k, update max length.

Time: O(n²), Space: O(1).

int longestOnes(vector<int>& nums, int k) {
    int n = nums.size(), res = 0;
    for (int i = 0; i < n; i++) {
        int zeros = 0;
        for (int j = i; j < n; j++) {
            if (nums[j] == 0) zeros++;
            if (zeros > k) break;
            res = max(res, j - i + 1);
        }
    }
    return res;
}

🔹 Approach 2: Sliding Window (while – Most Optimal, O(n))

Two pointers l and r.

Count zeros in window.

If zeros > k → shrink from left until valid.

Track max length.

int longestOnes(vector<int>& nums, int k) {
    int l = 0, zeros = 0, res = 0;
    for (int r = 0; r < nums.size(); r++) {
        if (nums[r] == 0) zeros++;
        while (zeros > k) {
            if (nums[l] == 0) zeros--;
            l++;
        }
        res = max(res, r - l + 1);
    }
    return res;
}

🔹 Approach 3: Sliding Window (if variant, O(n))

Similar to Approach 2.

Instead of shrinking fully (while), shrink only once with if.

Still works but less intuitive.

int longestOnes(vector<int>& nums, int k) {
    int l = 0, zeros = 0, res = 0;
    for (int r = 0; r < nums.size(); r++) {
        if (nums[r] == 0) zeros++;
        if (zeros > k) { // shrink once
            if (nums[l] == 0) zeros--;
            l++;
        }
        res = max(res, r - l + 1);
    }
    return res;
}

🎯 Summary Table
Approach	Idea	Time	Space	Usefulness
Brute Force	Check all subarrays	O(n²)	O(1)	Only for basics
Sliding Window (while)	Maintain valid window	O(n)	O(1)	✅ Best & expected
Sliding Window (if)	Shrink once	O(n)	O(1)	✅ Alternate variant
