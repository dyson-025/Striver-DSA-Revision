📝 Subarrays with K Different Integers
📌 Problem: https://leetcode.com/problems/subarrays-with-k-different-integers/description/

Given an integer array nums and an integer k, return the number of subarrays that contain exactly k distinct integers.

✅ Example

Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: The 7 subarrays are:
[1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,3].

🐢 Brute Force Approach
Idea

Generate all subarrays (O(n²)).

Count distinct elements using a set.

If distinct == k → increment answer.

💻 Code (C++)
class Solution {
public:
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        int n = nums.size(), ans = 0;

        for (int i = 0; i < n; i++) {
            unordered_set<int> st;
            for (int j = i; j < n; j++) {
                st.insert(nums[j]);
                if (st.size() == k) ans++;
                else if (st.size() > k) break;
            }
        }
        return ans;
    }
};


⏱ Time Complexity: O(n²)
💾 Space Complexity: O(k)

⚡ Optimized Sliding Window Approach
Key Idea

👉 Exactly K = AtMost(K) − AtMost(K−1)

💻 Code (C++)
class Solution {
public:
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        return atMostK(nums, k) - atMostK(nums, k - 1);
    }

    int atMostK(vector<int>& nums, int k) {
        unordered_map<int,int> freq;
        int l = 0, count = 0;

        for (int r = 0; r < nums.size(); r++) {
            freq[nums[r]]++;

            while (freq.size() > k) {
                freq[nums[l]]--;
                if (freq[nums[l]] == 0) freq.erase(nums[l]);
                l++;
            }
            count += (r - l + 1);
        }
        return count;
    }
};


⏱ Time Complexity: O(n)
💾 Space Complexity: O(k)

🔑 Key Takeaway

Brute Force: Easy to implement, but slow (O(n²)).

Sliding Window + AtMost Trick: Optimal (O(n)), must use in interviews.
