🟦 Grid Unique Paths (DP – 8)
link: https://leetcode.com/problems/unique-paths/description/
✅ Mark as Completed
🔥 Difficulty: Medium
📌 Score: 96

📖 Problem Statement

We are given two integers M and N which represent the dimensions of a grid of size M x N.

We start at the top-left cell (0, 0) and want to reach the bottom-right cell (M-1, N-1).

At each step, we can only move:

Right (→)

Down (↓)

We need to calculate the total number of unique paths from the start to the destination.

🧩 Examples
Example 1:
Input: M = 3, N = 2
Grid:
[ S,  ,  ]
[   ,  ,  ]
[   ,  , D]

Output: 3
Explanation: Possible paths are:
1. Right → Down → Down  
2. Down → Down → Right  
3. Down → Right → Down

Example 2:
Input: M = 2, N = 2
Grid:
[ S,  ]
[   , D]

Output: 2
Explanation: Possible paths are:
1. Right → Down  
2. Down → Right

⚡ Intuition

This is a classic combinatorial + DP problem.

At any cell (i, j):

To reach it, you could only come from above (i-1, j) OR from the left (i, j-1).

Hence,

ways(i, j) = ways(i-1, j) + ways(i, j-1)


This recurrence naturally leads us to Recursion → Memoization → Tabulation → Space Optimization.

🔴 Approach 1: Recursive Solution
🔎 Idea

Start from the destination (M-1, N-1) and move backwards.

At each cell (i, j), check both possible ways:

From up (i-1, j)

From left (i, j-1)

⏹ Base Cases

If (i, j) == (0, 0) → return 1 (found one valid path).

If (i < 0 or j < 0) → return 0 (out of grid).

📝 Recursive Code (C++)
int countWaysUtil(int i, int j) {
    if (i == 0 && j == 0) return 1;  // reached start
    if (i < 0 || j < 0) return 0;    // invalid path

    int up = countWaysUtil(i - 1, j);
    int left = countWaysUtil(i, j - 1);

    return up + left;
}

int countWays(int m, int n) {
    return countWaysUtil(m - 1, n - 1);
}

📊 Complexity

Time: Exponential → O(2^(M+N)) (overlapping subproblems).

Space: O(M+N) (recursion stack).

❌ Not efficient for larger grids.

🟠 Approach 2: Memoization (Top-Down DP)
🔎 Idea

Since recursion solves the same subproblems repeatedly, we use a DP table to store already computed results.

📝 Code (C++)
int countWaysUtil(int i, int j, vector<vector<int>>& dp) {
    if (i == 0 && j == 0) return 1;
    if (i < 0 || j < 0) return 0;

    if (dp[i][j] != -1) return dp[i][j];

    int up = countWaysUtil(i - 1, j, dp);
    int left = countWaysUtil(i, j - 1, dp);

    return dp[i][j] = up + left;
}

int countWays(int m, int n) {
    vector<vector<int>> dp(m, vector<int>(n, -1));
    return countWaysUtil(m - 1, n - 1, dp);
}

📊 Complexity

Time: O(M * N)

Space: O(M * N) (DP array) + O(M+N) recursion stack.

🟡 Approach 3: Tabulation (Bottom-Up DP)
🔎 Idea

We build the DP table iteratively:

dp[0][0] = 1 (starting point).

For each cell (i, j):

dp[i][j] = dp[i-1][j] + dp[i][j-1]


(Handle out-of-bound cases with 0).

📝 Code (C++)
int countWays(int m, int n) {
    vector<vector<int>> dp(m, vector<int>(n, 0));

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (i == 0 && j == 0) dp[i][j] = 1;
            else {
                int up = (i > 0) ? dp[i - 1][j] : 0;
                int left = (j > 0) ? dp[i][j - 1] : 0;
                dp[i][j] = up + left;
            }
        }
    }
    return dp[m - 1][n - 1];
}

📊 Complexity

Time: O(M * N)

Space: O(M * N)

🟢 Approach 4: Space Optimization
🔎 Idea

At each step, we only need:

Previous row values

Current row values

So instead of a 2D DP table, we use two 1D arrays.

📝 Code (C++)
int countWays(int m, int n) {
    vector<int> prev(n, 0);

    for (int i = 0; i < m; i++) {
        vector<int> curr(n, 0);
        for (int j = 0; j < n; j++) {
            if (i == 0 && j == 0) curr[j] = 1;
            else {
                int up = (i > 0) ? prev[j] : 0;
                int left = (j > 0) ? curr[j - 1] : 0;
                curr[j] = up + left;
            }
        }
        prev = curr;
    }
    return prev[n - 1];
}

📊 Complexity

Time: O(M * N)

Space: O(N) ✅

⚖️ Edge Cases to Consider

M = 1 or N = 1 → Only 1 path (straight line).

Very large M, N (like 1000 x 1000) → Use space optimized DP.

If grid had obstacles → Modify recurrence (handled in next problem).

✅ Final Takeaway

Recursion: Intuitive but inefficient.

Memoization: Optimized recursion, good for interviews.

Tabulation: Cleaner & iterative.

Space Optimized: Best practical solution.

👉 For M=3, N=2, all approaches give: 3 unique paths.
