Front (Q):
🔁 Generate all combinations of n pairs of well-formed parentheses
link: https://leetcode.com/problems/generate-parentheses/description/
📥 Input: n = 3
📤 Output: ["((()))","(()())","(())()","()(())","()()()"]
✅ Tags: recursion, backtracking, brackets, medium
📌 When can we add '(' or ')' in recursion?
🧪 Dry run for n = 2?

🧠 Logic / Reasoning:
You can only add '(' if you still have left parentheses available (open > 0).
You can only add ')' if the number of open brackets used so far is more than close (close < open).
Keep building the string until both open == 0 and close == 0.
🔩 Code (Pass-by-Reference, Clean):
cpp
CopyEdit
void generate(int open, int close, string &s, vector<string> &res) {
    if (open == 0 && close == 0) {
        res.push_back(s);
        return;
    }

    if (open > 0) {
        s.push_back('(');
        generate(open - 1, close, s, res);
        s.pop_back();
    }

    if (close > open) {
        s.push_back(')');
        generate(open, close - 1, s, res);
        s.pop_back();
    }
}
📞 Call like:
cpp
CopyEdit
vector<string> res;
string s;
generate(n, n, s, res);
🧪 Example:
Input: n = 3
Output:
scss
CopyEdit
"((()))"
"(()())"
"(())()"
"()(())"
"()()()"
🕒 Time Complexity: O(2^n)
Each level makes up to 2 calls, total combinations are Catalan Number C(n) → efficient recursion with pruning.
📦 Space Complexity: O(n) for recursion stack and string building
